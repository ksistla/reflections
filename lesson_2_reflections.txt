What happens when you initialize a repository? Why do you need to do it?

After running 'git init' command, a new directory called .git is created 
under the 'reflections' directory. Under .git, the following sub directories
are also created: hooks, info, objects and refs. New files: config, 
description and HEAD are also created.

We need to run the 'git init' command in order to convert the directory in 
which the 'git init' is run into a Git repository. 

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The git repository is a storage of all committed files. The working directory is
where files checked out from the repository would be stored. The user would
work on the files, edit them in the working directory. He would move only the 
files that are ready for committing to the staging area. 

The staging area offers a place where the user can move the select set of files
i.e. only those that he wishes to commit to the repository. 

How can you use the staging area to make sure you have one commit per logical change?

Move the files that you have been working on in the working directory and belong
to a logical change. Once these files are in the staging area, they can all
be part of one commit to the git repository.

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

When we want to work on an experimental feature while intended to not disturb
the working code, we keep the master branch intact and create a branch on 
which to work on the experimental code. 

How do the diagrams help you visualize the branch structure?

Using 'git log --graph --oneline' command displays all the commits and the different branches
in which the commits were made. It gives a picture of where the branches originated. 
This helps with proper merging of branches.
